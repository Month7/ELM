{"version":3,"sources":["src\\js\\common\\mock.js"],"names":["mock","url","opts","params","account","password","code","message","mobileVerifyToken","mobile","verifyCode","data","name","regionSting","regionCode","detailAddress","postalcode","telephone","addrId","nickname","email","birthday","realname","sex","identity","secretQuestion","options","restore","fetch"],"mappings":"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","file":"mock.js","sourceRoot":"D:/account-system-sdk","sourcesContent":["import regionData from './data/region-data.js';\r\nimport FetchMock from 'fetch-mock';\r\n\r\n// 配置需要mock的路由\r\nFetchMock.mock('/login', (url, opts) => {\r\n    const params = opts.params;\r\n    if (params.account === '18000351426') {\r\n        if (params.password === '123456') {\r\n            return {code: 200, message: 'success'};\r\n        }\r\n        else {\r\n            return {code: 401, message: '密码错误'};\r\n        }\r\n    }\r\n    else {\r\n        return {code: 400, message: '用户名错误'};\r\n    }\r\n});\r\n\r\n// 获取验证token\r\nFetchMock.mock('/getMobileVerifyToken', (url, opts) => {\r\n    return {code: 200, message: 'success', mobileVerifyToken: 'abc123456'};\r\n});\r\nFetchMock.mock('/register/getVerifyCode', (url, opts) => {\r\n    const params = opts.params;\r\n    return {code: 200, message: 'success', mobile: params.mobile };\r\n});\r\n\r\nFetchMock.mock('/register/mobile', (url, opts) => {\r\n    const params = opts.params;\r\n    if (params.verifyCode === '123456') {\r\n        return {code: 200, message: 'success'}\r\n    }\r\n    else {\r\n        return {code: 400, message: 'invalid verifyCode'}\r\n    }\r\n});\r\nFetchMock.mock('/register/info', {code: 200, message: 'success'});\r\nFetchMock.mock('/register/payment', {code: 200, message: 'success'});\r\nFetchMock.mock('/save-delivery', {code: 200, message: 'success'});\r\nFetchMock.mock('/del-delivery', {code: 200, message: 'success'});\r\n\r\n// 获取省市区数据\r\nFetchMock.mock('/region-data', (url, opts) => {\r\n    return { code: 200, message: 'success', data: regionData }\r\n});\r\n\r\nFetchMock.mock('/delivery-address', {\r\n    code: 200,\r\n    message: 'success',\r\n    data: [{\r\n        name: '张三',\r\n        regionSting: '北京市东城区',\r\n        regionCode: '1,1,1',\r\n        detailAddress: '和平北街334号',\r\n        postalcode: '100000',\r\n        mobile: 18512567389,\r\n        telephone: '',\r\n        addrId: 345\r\n    },\r\n    {\r\n        name: '张三',\r\n        regionSting: '北京市西城区',\r\n        regionCode: '1,1,2',\r\n        detailAddress: '和平西街234号',\r\n        postalcode: '100000',\r\n        mobile: 18512567389,\r\n        telephone: '',\r\n        addrId: 346\r\n    },\r\n    {\r\n        name: '李四',\r\n        regionSting: '上海市静安区',\r\n        regionCode: '9,73,723',\r\n        detailAddress: '和平北街334号',\r\n        postalcode: '100000',\r\n        mobile: 18517384387,\r\n        telephone: '',\r\n        addrId: 347\r\n    }]\r\n})\r\n\r\nFetchMock.mock('/profile', {\r\n    code: 200,\r\n    message: 'success',\r\n    data: {\r\n        nickname: 'month',\r\n        regionSting: '河北省唐山市',\r\n        regionCode: '9,73,723',\r\n        mobile: '1800351426',\r\n        email: 'vsgv@gmail.com',\r\n        birthday: '1999-01-01',\r\n        realname: 'yinzheng',\r\n        sex: 1\r\n    }\r\n});\r\n\r\nFetchMock.mock('/security-info', {\r\n    code: 200,\r\n    message: 'success',\r\n    data: {\r\n        nickname: 'xiaoming',\r\n        mobile: '18567286637',\r\n        email: 'xiaomong@163.com',\r\n        password: 1,\r\n        identity: 1,\r\n        secretQuestion: 0\r\n    }\r\n});\r\n\r\nFetchMock.mock('/forget', (url, opts) => {\r\n    const params = opts.params;\r\n    if (params.verifyCode === '123456') {\r\n        return {code: 200, message: 'success'}\r\n    }\r\n    else {\r\n        return {code: 400, message: 'invalid verifyCode'}\r\n    }\r\n});\r\n\r\nFetchMock.mock('/send-forget-verifycode', {\r\n    code: 200,\r\n    message: 'success'\r\n});\r\n\r\n\r\n\r\n// // 其他路由使用原生fetch，这段代码必须放最后\r\nFetchMock.mock('*', (url, options) => {\r\n  FetchMock.restore();\r\n  return fetch(url, options);\r\n});\r\n"]}