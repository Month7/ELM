'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fetch = require('../common/fetch.js');

var _utils = require('../common/utils.js');

var _fromCheck = require('../common/from-check.js');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function (opts) {
    var $saveBtn = (0, _utils.getId)('save-delivery-address');
    var $list = (0, _utils.getId)('delivery-address-list');
    var $form = (0, _utils.getId)('delivery-address-form');
    var tipMap = {
        'name': '收货人姓名',
        'region': '所在地信息',
        'detailAddress': '详细地址',
        'mobile': '手机号码'
        /**
         * 保存收货地址
         */
    };$form.onsubmit = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
            var checkResult, formValues, data, type, name;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            e.preventDefault();
                            checkResult = (0, _fromCheck.check)($form);

                            if (checkResult.length) {
                                _context.next = 11;
                                break;
                            }

                            formValues = {};

                            Array.from($form.elements).forEach(function (item) {
                                if (item.name) {
                                    formValues[item.name] = item.value;
                                }
                            });
                            _context.next = 7;
                            return (0, _fetch.fetchPost)('/save-delivery', formValues);

                        case 7:
                            data = _context.sent;

                            if (data.code == 200) {
                                opts.success && opts.success();
                            } else {
                                alert("保存失败");
                            }
                            _context.next = 14;
                            break;

                        case 11:
                            type = checkResult[0].type;
                            name = checkResult[0].name;

                            if (type == 'present') {
                                alert("不能为空！");
                            } else {
                                alert("请填写格式正确的" + tipMap[name]);
                            }

                        case 14:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, undefined);
        }));

        return function (_x) {
            return _ref.apply(this, arguments);
        };
    }();
    /**
     * 删除收获地址
     */
    (0, _utils.bindEvent)($list, 'click', '.del-delivery-address', function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {
            var data;
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!confirm("是否确定删除该收货地址？")) {
                                _context2.next = 5;
                                break;
                            }

                            _context2.next = 3;
                            return (0, _fetch.fetchPost)('/del-delivery', {
                                addrId: e.target.getAttribute('data-id')
                            });

                        case 3:
                            data = _context2.sent;

                            if (data.code == 200) {
                                location.reload();
                            } else {
                                alert("删除失败");
                            }

                        case 5:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, undefined);
        }));

        return function (_x2) {
            return _ref2.apply(this, arguments);
        };
    }());
};