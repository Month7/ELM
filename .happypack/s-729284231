'use strict';

var _regionData = require('./data/region-data.js');

var _regionData2 = _interopRequireDefault(_regionData);

var _fetchMock = require('fetch-mock');

var _fetchMock2 = _interopRequireDefault(_fetchMock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 配置需要mock的路由
_fetchMock2.default.mock('/login', function (url, opts) {
    var params = opts.params;
    if (params.account === '18000351426') {
        if (params.password === '123456') {
            return { code: 200, message: 'success' };
        } else {
            return { code: 401, message: '密码错误' };
        }
    } else {
        return { code: 400, message: '用户名错误' };
    }
});

// 获取验证token
_fetchMock2.default.mock('/getMobileVerifyToken', function (url, opts) {
    return { code: 200, message: 'success', mobileVerifyToken: 'abc123456' };
});
_fetchMock2.default.mock('/register/getVerifyCode', function (url, opts) {
    var params = opts.params;
    return { code: 200, message: 'success', mobile: params.mobile };
});

_fetchMock2.default.mock('/register/mobile', function (url, opts) {
    var params = opts.params;
    if (params.verifyCode === '123456') {
        return { code: 200, message: 'success' };
    } else {
        return { code: 400, message: 'invalid verifyCode' };
    }
});
_fetchMock2.default.mock('/register/info', { code: 200, message: 'success' });
_fetchMock2.default.mock('/register/payment', { code: 200, message: 'success' });
_fetchMock2.default.mock('/save-delivery', { code: 200, message: 'success' });
_fetchMock2.default.mock('/del-delivery', { code: 200, message: 'success' });

// 获取省市区数据
_fetchMock2.default.mock('/region-data', function (url, opts) {
    return { code: 200, message: 'success', data: _regionData2.default };
});

_fetchMock2.default.mock('/delivery-address', {
    code: 200,
    message: 'success',
    data: [{
        name: '张三',
        regionSting: '北京市东城区',
        regionCode: '1,1,1',
        detailAddress: '和平北街334号',
        postalcode: '100000',
        mobile: 18512567389,
        telephone: '',
        addrId: 345
    }, {
        name: '张三',
        regionSting: '北京市西城区',
        regionCode: '1,1,2',
        detailAddress: '和平西街234号',
        postalcode: '100000',
        mobile: 18512567389,
        telephone: '',
        addrId: 346
    }, {
        name: '李四',
        regionSting: '上海市静安区',
        regionCode: '9,73,723',
        detailAddress: '和平北街334号',
        postalcode: '100000',
        mobile: 18517384387,
        telephone: '',
        addrId: 347
    }]
});

_fetchMock2.default.mock('/profile', {
    code: 200,
    message: 'success',
    data: {
        nickname: 'month',
        regionSting: '河北省唐山市',
        regionCode: '9,73,723',
        mobile: '1800351426',
        email: 'vsgv@gmail.com',
        birthday: '1999-01-01',
        realname: 'yinzheng',
        sex: 1
    }
});

_fetchMock2.default.mock('/security-info', {
    code: 200,
    message: 'success',
    data: {
        nickname: 'xiaoming',
        mobile: '18567286637',
        email: 'xiaomong@163.com',
        password: 1,
        identity: 1,
        secretQuestion: 0
    }
});

_fetchMock2.default.mock('/forget', function (url, opts) {
    var params = opts.params;
    if (params.verifyCode === '123456') {
        return { code: 200, message: 'success' };
    } else {
        return { code: 400, message: 'invalid verifyCode' };
    }
});

_fetchMock2.default.mock('/send-forget-verifycode', {
    code: 200,
    message: 'success'
});

// // 其他路由使用原生fetch，这段代码必须放最后
_fetchMock2.default.mock('*', function (url, options) {
    _fetchMock2.default.restore();
    return fetch(url, options);
});